<?php

/*
 * This file is part of the Sylius package.
 *
 * (c) Paweł Jędrzejewski
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace App\Component\Core\Calculator;

use Sylius\Component\Core\Exception\MissingChannelConfigurationException;
use Sylius\Component\Core\Model\ProductVariantInterface;
use Sylius\Component\Core\Calculator\ProductVariantPricesCalculatorInterface;
use Sylius\Component\Order\Modifier\OrderItemQuantityModifierInterface;
use Webmozart\Assert\Assert;

final class ProductVariantPriceCalculator implements ProductVariantPricesCalculatorInterface
{
    public function __construct(
        private OrderItemQuantityModifierInterface $quantityModifier
        )
    {
        $this->quantityModifier = $quantityModifier;

    }

    public function calculate(ProductVariantInterface $productVariant, array $context): int
    {
        Assert::keyExists($context, 'channel');

        $channelPricing = $productVariant->getChannelPricingForChannel($context['channel']);

        if (null === $channelPricing || $channelPricing->getPrice() === null) {
            throw MissingChannelConfigurationException::createForProductVariantChannelPricing($productVariant, $context['channel']);
        }
// TODO Recalcul price and put quantity to 1 ( for product cuttype )
// dump($productVariant->getProduct()." type : ".$productVariant->getProduct()->getAttributeByCodeAndLocale('cuttype')->getValue());
// dump($productVariant);
// dump('calculate : '.$channelPricing->getPrice());
        //return $channelPricing->getPrice();
        $price = $channelPricing->getPrice();
        if($productVariant->getProduct()->isCutTypeProduct()){
            $price = intval($price/1000);
        }

        return $price;
        
    }

    /**
     * @throws \InvalidArgumentException|MissingChannelConfigurationException
     */
    public function calculateOriginal(ProductVariantInterface $productVariant, array $context): int
    {
        Assert::keyExists($context, 'channel');

        $channelPricing = $productVariant->getChannelPricingForChannel($context['channel']);

        if (null === $channelPricing) {
            throw MissingChannelConfigurationException::createForProductVariantChannelPricing($productVariant, $context['channel']);
        }

        if (null !== $channelPricing->getOriginalPrice()) {
// dump($productVariant->getProduct()." type : ".$productVariant->getProduct()->getAttributeByCodeAndLocale('cuttype')->getValue());
// dump('calculateOrignal getOriginalPrice : '.$channelPricing->getOriginalPrice());
            //return $channelPricing->getOriginalPrice();
            $price = $channelPricing->getOriginalPrice();
            if($productVariant->getProduct()->isCutTypeProduct()){
                $price = intval($price/1000);
            }

            return $price;
        }

        if ($channelPricing->getPrice() !== null) {
// dump($productVariant->getProduct()." type : ".$productVariant->getProduct()->getAttributeByCodeAndLocale('cuttype')->getValue());
// dump('calculateoriginal getPrice : '.$channelPricing->getPrice());
            //return $channelPricing->getPrice();
            $price = $channelPricing->getPrice();
            if($productVariant->getProduct()->isCutTypeProduct()){
                $price = intval($price/1000);
            }

            return $price;
        }

        throw MissingChannelConfigurationException::createForProductVariantChannelPricing($productVariant, $context['channel']);
    }
}



   